```plantuml
@startuml
!includeurl https://raw.githubusercontent.com/proveo-ca/identity/refs/heads/main/proveo.iuml

title Key relationships between datastructures

frame "Native building-blocks" as NBB {
    class "Object/Map/Dictionary" as Map {
        ...
       +get()
        +keys()
        +values()
        ...()
    }
    class "Array/List" as Array {
        ...
        +push()
        +pop()
        ...()
    }
    class Set {
        ...
        +has()
        +add()
        +delete()
        ...()
    }
}

frame "Linear Data structures" as LDS {
    class LinkedList {
        +head: LinkedListNode<T>
        +insertAtHead()
        +removeHead()
        +fromArray()
    }
    class LinkedListNode {
        +data: T
        +next: LinkedListNode<T>
    }
    class DoublyLinkedList {
        +head: DoublyLinkedListNode<T>
        +tail: DoublyLinkedListNode<T>
        +insertAtHead()
        +insertAtTail()
        +removeHead()
        +removeTail()
        +fromArray()
    }
    class DoublyLinkedListNode {
        +prev: DoublyLinkedListNode<T>
    }
    class Stack {
        -items: Array<T>
        +push()
        +pop()
    }
    class Queue {
        -items: DoublyLinkedList<T>
        +isEmpty()
        +size()
        +peek()
        +enqueue()
        +dequeue()
    }
    class Deque {
        -items: DoublyLinkedList<T>
        -head: DoublyLinkedListNode<T>
        -tail: DoublyLinkedListNode<T>
        +isEmpty()
        +size()
        +peekAtHead()
        +peekAtTail()
        +extractHead()
        +extractTail()
        +...()
    }
    note top of Deque : "Double-ended Queue"
}


frame "Non-linear Data structures" as NDS {
    rectangle "Trees" {
        class BinarySearchTreeNode {
            -data: T
            +left: BinaryTreeNode<T>
            +right: BinaryTreeNode<T>
            +parent: BinaryTreeNode<T>
        }
        class BinarySearchTree {
            -root: BinarySearchTreeNode<T>
            -size: number
            +BFS()
            +DFS()
            +isEmpty()
            +insert()
            +searchByKey()
            +deleteByKey()
        }
        class AVLTreeNode {
            -...
            -height: number
        }
        class AVLTree {
            -root: AVLTreeNode<T>
            +...()
            -getBalance()
            -leftRotate()
            -rightRotate()
        }
        abstract class Heap {
            -items: Array<T>
            -size: number
            -capacity: number
            -left()
            -right()
            -parent()
            -heapify()
            +insert()
            +deleteByKey()
        }
        class MinHeap {
            ...
            +...()
            -heapify()
            +peekMin()
            +extractMin()
        }
        class MaxHeap {
            ...
            +...()
            -heapify()
            +peekMax()
            +extractMax()
        }
        class TrieNode {
            -children: Map<char, TrieNode>
            -isEndOfWord: boolean
        }
        class Trie {
            -root: TrieNode
            -size: number
            +insert()
            +search()
            +startsWith()
            +delete()
        }
    }

    '─── Heaps & priority queues ────────────────────────────────────────

    abstract class PriorityQueue {
        -heap: Heap<T>
        +isEmpty()
        +peek()
        +enqueue()
        +dequeue()
    }
    class MinPriorityQueue {
        -heap: MinHeap<T>
        +...()
        +getMinPriority()
    }
    class MaxPriorityQueue {
        -heap: MaxHeap<T>
        +...()
        +getMaxPriority()
    }

    '─── Graphs ─────────────────────────────────────────────────────────
    class Graph {
        -adjacency: Map<T, Array<T>>
        -verticesCount: number
        +addVertex()
        +addEdge()
        +hasCycle()
        +BFS()
        +DFS()
    }
    class DirectedGraph {
        ...
        ...()
        -addDirectedEdge()
        -topologicalSort()
    }

    '─── Disjoint‑Set (Union‑Find) ──────────────────────────────────────
    class UnionFind {
        -parent: Array<int>
        -rank:   Array<int>
        +find()
        +union()
        +areConnected()
        +setCount()
    }
}
Array --* Stack
Array ---o Graph
Array ---* Heap
Array --* UnionFind : " parent/rank tables"
Set --* Map
Map ---o TrieNode
Map ---o Graph

Stack ..> NDS : " DFS Traversal methods\nRecursion: Function call stack"
LinkedList o-- "1..*" LinkedListNode : contains

DoublyLinkedList o-- "1..*" DoublyLinkedListNode : contains
DoublyLinkedListNode --|> LinkedListNode

Queue ..> NDS : " BFS Traversal methods"
Queue *-- DoublyLinkedList
Deque *-- DoublyLinkedList

BinarySearchTree o-- "1..*" BinarySearchTreeNode : nodes

AVLTree --|> BinarySearchTree : 'AVL adds balancing in BST
AVLTreeNode --|> BinarySearchTreeNode
AVLTree o-- " 1..*" AVLTreeNode : nodes

Trie o-- " 1 ..*" TrieNode : nodes

MinHeap --|> Heap
MaxHeap --|> Heap

PriorityQueue *-- Heap

MinPriorityQueue --|> PriorityQueue
MinPriorityQueue *-- MinHeap

MaxPriorityQueue --|> PriorityQueue
MaxPriorityQueue *-- MaxHeap
DirectedGraph --|> Graph


NBB -[hidden]down--> LDS
LDS -[hidden]down-----> NDS

@enduml
```
